<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sadr.dao.UsersMapper">
	<resultMap id="BaseResultMap" type="com.sadr.domain.Users">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="account" jdbcType="VARCHAR" property="account" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="tel" jdbcType="VARCHAR" property="tel" />
		<result column="role" jdbcType="INTEGER" property="role" />
		<result column="company_id" jdbcType="INTEGER" property="companyId" />
		<result column="enable" jdbcType="BIT" property="enable" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, name, account, password, tel, role, company_id, enable
	</sql>
	<select id="selectByExample" parameterType="com.sadr.domain.UsersExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from users
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from users
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from users
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.sadr.domain.UsersExample">
		delete from users
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.sadr.domain.Users">
		insert into users (id, name,
		account,
		password, tel, role,
		company_id, enable)
		values
		(#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{account,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{tel,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER},
		#{companyId,jdbcType=INTEGER}, #{enable,jdbcType=BIT})
	</insert>
	<insert id="insertSelective" parameterType="com.sadr.domain.Users">
		insert into users
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="account != null">
				account,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="tel != null">
				tel,
			</if>
			<if test="role != null">
				role,
			</if>
			<if test="companyId != null">
				company_id,
			</if>
			<if test="enable != null">
				enable,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="account != null">
				#{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				#{tel,jdbcType=VARCHAR},
			</if>
			<if test="role != null">
				#{role,jdbcType=INTEGER},
			</if>
			<if test="companyId != null">
				#{companyId,jdbcType=INTEGER},
			</if>
			<if test="enable != null">
				#{enable,jdbcType=BIT},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.sadr.domain.UsersExample"
		resultType="java.lang.Long">
		select count(*) from users
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update users
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.account != null">
				account = #{record.account,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.tel != null">
				tel = #{record.tel,jdbcType=VARCHAR},
			</if>
			<if test="record.role != null">
				role = #{record.role,jdbcType=INTEGER},
			</if>
			<if test="record.companyId != null">
				company_id = #{record.companyId,jdbcType=INTEGER},
			</if>
			<if test="record.enable != null">
				enable = #{record.enable,jdbcType=BIT},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update users
		set id = #{record.id,jdbcType=INTEGER},
		name =
		#{record.name,jdbcType=VARCHAR},
		account =
		#{record.account,jdbcType=VARCHAR},
		password =
		#{record.password,jdbcType=VARCHAR},
		tel =
		#{record.tel,jdbcType=VARCHAR},
		role = #{record.role,jdbcType=INTEGER},
		company_id = #{record.companyId,jdbcType=INTEGER},
		enable =
		#{record.enable,jdbcType=BIT}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.sadr.domain.Users">
		update users
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="account != null">
				account = #{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				tel = #{tel,jdbcType=VARCHAR},
			</if>
			<if test="role != null">
				role = #{role,jdbcType=INTEGER},
			</if>
			<if test="companyId != null">
				company_id = #{companyId,jdbcType=INTEGER},
			</if>
			<if test="enable != null">
				enable = #{enable,jdbcType=BIT},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.sadr.domain.Users">
		update users
		set
		name = #{name,jdbcType=VARCHAR},
		account = #{account,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		tel = #{tel,jdbcType=VARCHAR},
		role = #{role,jdbcType=INTEGER},
		company_id =
		#{companyId,jdbcType=INTEGER},
		enable = #{enable,jdbcType=BIT}
		where id
		= #{id,jdbcType=INTEGER}
	</update>

	<!-- Users getUserByAccount(String account); -->
	<select id="getUserByAccount" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		SELECT * FROM users WHERE account = #{account}
	</select>
	
	<!-- List<Users> listreview(); -->
	<select id="listreview" parameterType ="com.sadr.domain.Users" resultMap="BaseResultMap">
		SELECT * FROM users WHERE enable = 0  limit #{startpage},#{limit}
	</select>
	
	<!-- int listreviewCount(); -->
		<select id="listreviewCount"  resultType="java.lang.Integer">
		SELECT count(*) FROM users WHERE enable = 0
	</select>
	
	<!-- List<Users> listreview(); -->
	<select id="listuser" parameterType ="com.sadr.domain.Users" resultMap="BaseResultMap">
		SELECT * FROM users WHERE enable = 1  limit #{startpage},#{limit}
	</select>
	
	<!-- int listreviewCount(); -->
		<select id="listuserCount"  resultType="java.lang.Integer">
		SELECT count(*) FROM users WHERE enable = 1
	</select>
	
	<!-- Users searchreview(Users users); -->
	<select id="searchreview"  parameterType="com.sadr.domain.Users" resultMap="BaseResultMap">
		SELECT * FROM users WHERE enable = 1 and id = #{id}
	</select>
</mapper>